// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts    Account[]
  Session     Session[]
  Contributor Contributor[]
  Favorite    Favorite[]
  Story       Story?        @relation(fields: [storyId], references: [id])
  storyId     String?       @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Story {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  title       String
  category    String
  coverImage  String
  isCompleted Boolean
  content     String
  User        User[]
  Contributor Contributor[]
  Favorite    Favorite[]
  Category    Category?     @relation(fields: [categoryId], references: [id])
  categoryId  String?       @db.ObjectId
}

model Category {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  icon  String
  Story Story[]
}

model Contributor {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  story     Story    @relation(fields: [storyId], references: [id])
  userId    String   @db.ObjectId
  storyId   String   @db.ObjectId
}

model Favorite {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  story   Story  @relation(fields: [storyId], references: [id])
  userId  String @db.ObjectId
  storyId String @db.ObjectId
}
